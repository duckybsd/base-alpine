#!/bin/sh

answer () {
  local tmp_answer=$(cat /proc/sys/kernel/random/uuid)
  local retries=3
  local err
  [ -z "$state_uuid" ] && state_uuid=0
  [ -z "$errno" ] && errno=0
  [ -z "$result" ] && result="ok"
  if echo "${result}" | grep 'Permanently added the RSA host key' > /dev/null 2>&1;then
    result='ok'
  fi
  result=$(printf "%s" "${result}" | sed -e ':a;N;$!ba;s/\\/\\\\/g;s/%/%25/g;s/\;/%3B/g;s/&/%26/g;s/+/%2B/g;s/"/\\"/g;s/\f/\\f/g;s/\t/\\t/g;s/\r/\\r/g;s/\n/\\n/g')
  result=$(printf "%s" "${result}" | sed -e 's/\t/\\t/g')
  if [ "${errno}" != "0" ];then
    log 'processed with error'
    if [ "${is_backend}" = "0" ]; then
      printf '{"type":"response","state_uuid":"%s","namespace":"%s","hostname":"%s","task":"%s","error":{"errno":"%s","message":"%s"}}' "${state_uuid}" "${WODBY_NAMESPACE}" "${HOSTNAME}" "${0##*/}" "${errno}" "${result}" > "/tmp/${tmp_answer}"
    else
      printf 'value={"type":"response","state_uuid":"%s","namespace":"%s","hostname":"%s","task":"%s","error":{"errno":"%s","message":"%s"}}' "${state_uuid}" "${WODBY_NAMESPACE}" "${HOSTNAME}" "${0##*/}" "${errno}" "${result}" > "/tmp/${tmp_answer}"
    fi
  else
    log 'processed with result'
    if [ "${is_backend}" = "0" ]; then
      printf '{"type":"response","state_uuid":"%s","namespace":"%s","hostname":"%s","task":"%s","result":"%s"}' "${state_uuid}" "${WODBY_NAMESPACE}" "${HOSTNAME}" "${0##*/}" "${result}" > "/tmp/${tmp_answer}"
    else
      printf 'value={"type":"response","state_uuid":"%s","namespace":"%s","hostname":"%s","task":"%s","result":"%s"}' "${state_uuid}" "${WODBY_NAMESPACE}" "${HOSTNAME}" "${0##*/}" "${result}" > "/tmp/${tmp_answer}"
    fi
  fi
  unset_lock
  while [ "${retries}" -ge "0"  ];do
    if [ "${is_backend}" = "0" ]; then
      cat /tmp/${tmp_answer} | ncat --send-only "${backend_host}" "${backend_port}"
      err=$?
    else
      curl --globoff -sSLX PUT ${etcd}/${response_path} --data-binary @/tmp/${tmp_answer}
      err=$?
    fi
    if [ "${err}" != "0" ];then
      retries=$(($retries -1))
      sleep 1
      continue
    fi
    break
  done
  if [ "${err}" != "0" ];then
    log 'answer was not sent due to error'
  else
    log 'answer was sent'
  fi
  rm -f "/tmp/${tmp_answer}"
  [ "${errno}" != "0" ] && exit 1
}

log () {
  local tmp_answer=$(cat /proc/sys/kernel/random/uuid)
  local retries=3
  local err
  local message
  [ -z "$state_uuid" ] && state_uuid=0
  if [ -z "$1" ];then
    message="received"
  else
    message="$1"
  fi
  if [ "${is_backend}" = "0" ]; then
    printf '{"type":"log","log":{"message_uuid":"%s","data":{"namespace":"%s","hostname":"%s","task":"%s"},"message":"%s","severity":200,"type":"iaas.%s"}}' "${state_uuid}" "${WODBY_NAMESPACE}" "${HOSTNAME}" "${0##*/}" "${message}" "${0##*/}" > "/tmp/${tmp_answer}"
  else
    printf 'value={"type":"log","log":{"message_uuid":"%s","data":{"namespace":"%s","hostname":"%s","task":"%s"},"message":"%s","severity":200,"type":"iaas.%s"}}' "${state_uuid}" "${WODBY_NAMESPACE}" "${HOSTNAME}" "${0##*/}" "${message}" "${0##*/}" > "/tmp/${tmp_answer}"
  fi
  while [ "${retries}" -ge "0"  ];do
    if [ "${is_backend}" = "0" ]; then
      cat /tmp/${tmp_answer} | ncat --send-only "${backend_host}" "${backend_port}"
      err=$?
    else
      curl --globoff -sSLX PUT ${etcd}/${response_path} --data-binary @/tmp/${tmp_answer}
      err=$?
    fi
    if [ "${err}" != "0" ];then
      retries=$(($retries -1))
      sleep 1
      continue
    fi
    break
  done
  rm -f "/tmp/${tmp_answer}"    
}

set_value () {
  if [ -z "${key_path}" ] || [ -z "${value_data}" ];then
    return 1
  fi
  local err
  local retries=3
  local tmp_answer=$(cat /proc/sys/kernel/random/uuid)
  value_data=$(printf "%s" "${value_data}" | sed -e 's/%/%25/g;s/\;/%3B/g;s/&/%26/g;s/+/%2B/g')
  printf 'value=%s' "${value_data}" > "/tmp/${tmp_answer}"
  while [ "${retries}" -ge "0"  ];do
    curl --globoff -sSLX PUT ${etcd}/${key_path} --data-binary @/tmp/${tmp_answer}
    err=$?
    if [ "${err}" != "0" ];then
      retries=$(($retries -1))
      sleep 1
      continue
    fi
    break
  done
  rm -f "/tmp/${tmp_answer}"
  if [ "${err}" != "0" ];then
		return 1
  fi
}

remove_key () {
  if [ -z "$1" ];then
    return 1
  fi
  local key=$1
  local err
  local retries=3
#   local tmp_answer=$(cat /proc/sys/kernel/random/uuid)
#   value_data=$(printf "%s" "${value_data}" | sed -e 's/%/%25/g;s/\;/%3B/g;s/&/%26/g;s/+/%2B/g')
#   printf 'value=%s' "${value_data}" > "/tmp/${tmp_answer}"
  while [ "${retries}" -ge "0"  ];do
    curl -sSLX DELETE ${etcd}/${key}
    err=$?
    if [ "${err}" != "0" ];then
      retries=$(($retries -1))
      sleep 1
      continue
    fi
    break
  done
  if [ "${err}" != "0" ];then
		return 1
  fi    
}

check_lock () {
  if [ -z "$1" ];then
    lock_name="${lockdir}/${0##*/}_${state_uuid}.lock"
  else
    lock_name="$1"
  fi
  curent_time=$(date +%s)
  if [ -f "${lock_name}" ];then
    lock_time=$(stat -c %Y "${lock_name}")
    log 'found task lock'
    return 0
  fi
  return 1
}

set_lock () {
  if [ -z "$1" ];then
    lock_name="${lockdir}/${0##*/}_${state_uuid}.lock"
  else
    lock_name="$1"
  fi
  sleep .$(($(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -d' ' -f1) % 500 + 1))
  if check_lock "${lock_name}"; then
    return 1
  fi
  touch "${lock_name}"
}

unset_lock () {
  if [ -z "$1" ];then
    lock_name="${lockdir}/${0##*/}_${state_uuid}.lock"
  else
    lock_name="$1"
  fi
  rm -f "${lock_name}"
}
